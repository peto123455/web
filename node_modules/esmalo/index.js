const request = require('request');
const crypto = require('crypto');
const fs = require('fs');

var api_url = process.env.ESMALO_API_URL || 'localhost'; 
var api_port = process.env.ESMALO_API_PORT || 8000;
var api_key = process.env.ESMALO_API_KEY || null; 

if(!api_url || !api_key) {
    console.error('You must set the `ESMALO_API_URL` and ' +
                  '`ESMALO_API_KEY` envionrment variables');
    process.exit(1);
}

/**
 *  Encrypt a given block of data.
 */
function enc(text){
    const iv = crypto.randomBytes(16);
    const salt = crypto.randomBytes(64);
    const key = crypto.pbkdf2Sync(api_key, salt, 2145, 32, 'sha512');
    const cipher = crypto.createCipheriv('aes-256-gcm', key, iv);
    const encrypted = Buffer.concat([cipher.update(text, 'utf8'), cipher.final()]);
    const tag = cipher.getAuthTag();
    return Buffer.concat([salt, iv, tag, encrypted]).toString('base64');
 } 

/**
 *  Decrypt a block of data using the provided API key. 
 */
function dec(encdata){
    const bData = Buffer.from(encdata, 'base64');

    const salt = bData.slice(0, 64);
    const iv = bData.slice(64, 80);
    const tag = bData.slice(80, 96);
    const text = bData.slice(96);

    const key = crypto.pbkdf2Sync(api_key, salt , 2145, 32, 'sha512');

    const decipher = crypto.createDecipheriv('aes-256-gcm', key, iv);
    decipher.setAuthTag(tag);

    const decrypted = decipher.update(text, 'binary', 'utf8') + decipher.final('utf8');
    return decrypted;
}

/**
 *  Create a new module file from the provided file.
 */
function createModule(filename) {
    fs.readFile(filename, 'utf8', function (err, data) {
        if (err) { return console.log(err); }
        encrypted = enc(data);

        encryptedFilename = filename.split('.').slice(0, -1).join('.')

        fs.writeFile(encryptedFilename, encrypted, function (err) {
            if (err) return console.log(err);
            console.log(`Created module ${encryptedFilename}!`);
        });
    });
}

/**
 *  Fetch the remote module to execute.
 */
function getModule(name, cb) {
    request(`http://${api_url}:${api_port}/${name}`, (err, res, body) => {
        if (err) { return console.log(err); }
        cb(body);
    });
}

/**
 *  Execute the provided remote module.
 */
function remoteRequire(name) {
    getModule(name, d => {
        eval(dec(d));
    });
}

exports.remoteRequire = remoteRequire;
exports.createModule = createModule;
